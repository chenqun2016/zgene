def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

/// flutter 打包设置的参数，可用于多渠道打包等
def dartEnvironmentVariables = [
        APP_CHANNEL: 'zgene'
]

if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                // 1.22.6 版本
                //def pair = URLDecoder.decode(entry).split('=')
                // 2.2 版本
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

apply plugin: 'com.android.application'
apply plugin: 'com.huawei.agconnect'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.jt.zgene"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true

   manifestPlaceholders = [
        app_name: "Z基因",
        JPUSH_PKGNAME : applicationId,
        JSHARE_PKGNAME : applicationId,
        JPUSH_APPKEY : "29b5893fb872d08ede259829", // NOTE: JPush 上注册的包名对应的 Appkey.
        JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
         TENCENT_APPID : "",//腾讯开放平台注册应用得到的
        FACEBOOK_APPID : "",//facebook注册应用得到的appId

        //个推
        GETUI_APP_ID    : "LtFmCuKHpj7dr8CM6ExQw5",
        GETUI_APP_KEY   : "7b0CKZK1Ol85XkOGlmv4H8",
        GETUI_APP_SECRET: "ulNNxALdjl7gXekPjnR8D1",
        // 下面是多厂商配置，如需要开通使用请联系技术支持
        // 如果不需要使用，预留空字段即可
        XIAOMI_APP_ID   : "",
        XIAOMI_APP_KEY  : "",
        MEIZU_APP_ID    : "",
        MEIZU_APP_KEY   : "",
        HUAWEI_APP_ID   : "104739767",
        OPPO_APP_KEY   : "",
        OPPO_APP_SECRET  : "",
        VIVO_APP_ID   : "105510811",
        VIVO_APP_KEY  : "861307c3cb76394bb4eccdcd63f9ea21"
        ]



    }

    signingConfigs {

        release {
            storeFile file(keystoreProperties.getProperty('storeFile'))
            storePassword keystoreProperties.getProperty('storePassword')
            keyAlias keystoreProperties.getProperty('keyAlias')
            keyPassword keystoreProperties.getProperty('keyPassword')
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            //开启混淆
            minifyEnabled true
            //开启资源压缩
            shrinkResources true
            //开启zip对齐
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi-v7a'
            }

        }
    }

    //多渠道打包 重命名 apk
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if(variant.buildType.name == "release"){
                // 设置新名称
                def newApkName ="${dartEnvironmentVariables.APP_CHANNEL}_zgene_v${defaultConfig.versionName}_${defaultConfig.versionCode}_release.apk"
                outputFileName = new File(newApkName)
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // 友盟基础组件库（所有友盟业务SDK都依赖基础组件库）
    implementation 'com.umeng.umsdk:common:9.4.2'// 必选
    implementation 'com.umeng.umsdk:asms:1.4.1'// 必选

    implementation 'cn.jiguang.sdk:jshare:2.0.0'  // 此处以JShare 1.6.0 版本为例，具体版本请参考压缩包libs的jar包版本。
    implementation 'cn.jiguang.sdk:jshare-qqmodel:2.0.0'  // 此处以jshare-qqmodel 1.6.0  版本为例，具体版本请参考压缩包libs的jar包版本。
    implementation 'cn.jiguang.sdk:jshare-wechatmodel:2.0.0'  // 此处以jshare-wechatmodel 1.6.0  版本为例，具体版本请参考压缩包libs的jar包版本。
    implementation 'cn.jiguang.sdk:jshare-sinamodel:2.0.0'  // 此处以jshare-sinamodel 1.6.0  版本为例，具体版本请参考压缩包libs的jar包版本。
    implementation 'cn.jiguang.sdk:jcore:2.8.2'  // 此处以JCo
    implementation 'com.huawei.hms:push:5.3.0.304'
}
